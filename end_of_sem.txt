When I first joined the project, I chose to work on the dynamic feedback reminder issue. It seemed like a manageable starting point and was tagged as a good first contribution, which gave me some confidence stepping into an unfamiliar codebase. The core goal, making feedback prompts more relevant and better timed, felt like something that could directly improve the user experience. But almost immediately, I ran into complications. The feedback form didn’t function properly in the iOS simulator, mostly due to how it tried to link out to the App Store. Without a way to properly trigger or test the functionality, I found myself stuck, unsure of how to move forward in a meaningful way. In hindsight, I wish I had shifted gears or asked for help sooner rather than staying in that limbo trying to debug something I didn’t have the tools to test fully.

Another major learning curve early on was figuring out how to collaborate effectively with other team members in a shared development environment. Tim and I were trying to access the same Mac remotely using Parsec, and at first, it was chaotic. I was confused about how to use Parsec effectively because I would log in and log out for security purposes but then the other members would complain that their machines were disconnected from Parsec altogether. So Tim taught me how to properly start and end a Parsec session. It also took time for us to figure out how to work without interrupting each other's sessions, especially since Tim was working on a totally different problem. Although it caused delays in the beginning, it taught me a lot about the importance of clear communication and coordination. Once we had a system in place, it made working alongside others much smoother and gave me a new appreciation for the soft skills that support technical work.

Eventually, I shifted focus and started collaborating with Jay on the iPhone language settings issue, which proved to be a much deeper technical challenge than I’d expected. Our goal was to ensure the app respected the phone’s default language, providing a seamless localized experience from the start. We initially assumed the fix would be relatively simple (just pull the system locale and apply it) but the app wasn’t behaving predictably. We ended up diving into iOS localization docs, investigating how the app initializes its settings, and even poking around the onboarding flow and AppDelegate to understand how and when language preferences were set or cached. That process forced me to read more system-level documentation and practice debugging in a layered, persistent way—an experience I’d never really had before.

What made the work really fulfilling was how it evolved from trying to force automatic behavior to designing a more user-friendly solution. Instead of changing the app language silently, we implemented a checker that detects when the app and system languages are mismatched, and triggers a pop-up asking the user if they want to switch. It took several iterations to get it working because the pop-up would disappear, buttons wouldn't respond, or it wouldn’t trigger at all, but we chipped away at it, especially by editing lifecycle methods in the AppDelegate. Eventually, we got everything working as intended, and that moment—seeing the pop-up appear and respond just right—was incredibly satisfying. It felt like our efforts had culminated in something both functional and thoughtful.

Reflecting on the whole experience, I’ve come to realize how much of software development is less about writing perfect code the first time, and more about working through ambiguity and figuring things out piece by piece. If I could do it again, I’d try to spend less time second-guessing where to start and more time just diving into the code and experimenting. I’d also make earlier use of the team as a resource—collaboration ended up being one of the best parts of this experience, but I think I could’ve leaned into it sooner. 